import aiohttp
import asyncio
import boto3
import discord
import io
from discord.ext import commands
from openai import OpenAI

class ImageGenerator(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        # self.db = Database(pg_username='postgres',
        #                    pg_password='chandlerb',
        #                    pg_db='postgres',
        #                    host='127.0.0.1:5432')

    async def generate_image(self, **kwargs: str):
        """
        Generates an image result from the provided prompt using the OpenAI API `client.images.generate()`.
        """
        prompt = kwargs.get('prompt')
        image_size = kwargs.get('image_size')
        image_quality = kwargs.get('image_quality')

        client = OpenAI()
        result = client.images.generate(model=self.dalle_model,
                                        prompt=prompt,
                                        n=1, size=image_size,
                                        quality=image_quality)
        return result

    async def download_image(self, ctx, url):
        """
        Download the `.png` image generated by OpenAI API using the temporary link provided. Returns type `io.BytesIO` if successful.

        Arguments:
        - `ctx`: Discord message context
        - `url`: Temporary URL provided by OpenAI API call
        """
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status != 200:
                    await ctx.send("Failed to download the image.")
                    return
                image_data = await response.read()
                return io.BytesIO(image_data)
    
    # considering **kwargs
    def upload_generated_image(self, image_data: io.BytesIO, image_name: str, bucket_name: str) -> str:
        """
        Upload generated image to object storage using the `boto3` AWS API.
        
        Arguments:
        - `image_data`: The image data as a `io.BytesIO` object
        - `image_name`: Filename of the uploaded image
        - `bucket_name`: Name of storage bucket being 
        """
        b2_client = boto3.client('s3')
        b2_client.put_object(Bucket=bucket_name,
                             Key=image_name,
                             Body=image_data)
        
        # store_image = asyncio.create_task(self.db.store_generated_image())
        # get b2 bucket link for uploaded object
        # https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#s3
        # store reference to image in sql database: username, time of day, the prompt, caption (revised prompt), b2 bucket link to photo
            
    @commands.Cog.listener()
    async def on_ready(self):
        print("DiscordGPT Image Generator Ready\n")

    @commands.command()
    async def img(self, ctx, *, prompt):
        """
        Generate a 1024x1024 image using DALLE 3 Standard
        """
        if str(ctx.message.channel) != 'boggart':
            return
        await ctx.send(f"Generating: \"{prompt}\"")

        try:
            image_result = await self.generate_image(prompt=str(prompt),
                                                     image_size='1024x1024',
                                                     image_quality='standard')

        except Exception as e:
            await ctx.send(f"Error generating image: {e}")
            return
        
        try:
            image = await self.download_image(ctx, image_result.data[0].url)
            filename = f"{ctx.message.author.display_name}.png"
            await ctx.send(image_result.data[0].revised_prompt,
                           file=discord.File(fp=image, filename=filename))
            
        except Exception as e:
            await ctx.send(f"Error sending image: {e}")

    @commands.command()
    async def img_hd(self, ctx, *, prompt):
        """
        Generate 1792x1024 image using DALLE 3 HD
        """
        if str(ctx.message.channel) != 'boggart':
            return
        await ctx.send(f"Generating HD Image: \"{prompt}\"")

        try:
            image_result = await self.generate_image(prompt=str(prompt),
                                                     image_size='1792x1024',
                                                     image_quality='hd')

        except Exception as e:
            await ctx.send(f"Error generating image: {e}")
            return

        try:
            filename = f"{ctx.message.author.display_name}.png"
            image = await self.download_image(ctx, image_result.data[0].url)
            await ctx.send(image_result.data[0].revised_prompt,
                           file=discord.File(fp=image, filename=filename))

        except Exception as e:
            await ctx.send(f"Error sending image: {e}")

async def setup(bot):
    await bot.add_cog(ImageGenerator(bot))