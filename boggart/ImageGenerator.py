import asyncio
import boto3
import discord
import io
import logging
import os
import sys
import uuid

from aiohttp import ClientSession
from discord.ext import commands
from openai import OpenAI
from botocore.exceptions import NoCredentialsError

class ImageGenerator(commands.Cog):
    """Discord.py Cog for generating images using OpenAI DALLE"""
    
    def __init__(self, bot):
        self.bot = bot
        self.lock = asyncio.Lock()

        self.stream_handler = logging.StreamHandler(stream=sys.stdout)
        self.date_format = '%Y-%m-%d %H:%M:%S'
        self.formatter = logging.Formatter('[{asctime}] [{levelname:<8}] {name}: {message}', self.date_format, style='{')
        self.stream_handler.setFormatter(self.formatter)

        self.img_logger = logging.getLogger('boggart.imagegenerator')
        self.img_logger.setLevel(logging.INFO)
        self.img_logger.addHandler(self.stream_handler)

        self.pg_logger = logging.getLogger('boggart.postgres')
        self.pg_logger.setLevel(logging.INFO)
        self.pg_logger.addHandler(self.stream_handler)

    async def __generate_image(self, **kwargs: str):
        """Generates an image result from the provided prompt using the OpenAI API `client.images.generate()`"""
        prompt = kwargs.get('prompt')
        image_size = kwargs.get('image_size')
        image_quality = kwargs.get('image_quality')

        client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
        result = client.images.generate(
            model=os.getenv('OPENAI_DALLE_MODEL'),
            prompt=prompt,
            n=1, size=image_size,
            quality=image_quality
        )
        
        self.img_logger.info('Image downloaded from OpenAI')
        return result

    async def __download_image(self, ctx, url) -> io.BytesIO:
        """
        Download the `.png` image generated by OpenAI API using the temporary link provided.
        Returns type `io.BytesIO` if successful.

        Arguments:
        - `ctx`: Discord message context
        - `url`: Temporary URL provided by OpenAI API call
        """
        async with ClientSession() as session, session.get(url) as response:
            if response.status != 200:
                await ctx.send('Failed to download the image.')
                self.img_logger.warning('Could not download image from OpenAI')
                return
            
            image_data = await response.read()
            return io.BytesIO(image_data)
            
    async def __send_image(self, ctx, image_data: io.BytesIO, filename: str, caption: str) -> None:
        """Send Image to Discord chat"""

        self.img_logger.info(f'Sending image {filename} to Discord')

        async with self.lock:
            image_data.seek(0)
            await ctx.send(caption, file=discord.File(fp=image_data, filename=filename))
    
    # todo: switch to local object store
    async def __upload_generated_image(self, image_data: io.BytesIO, obj_filename: str, bucket_name: str) -> None:
        """Upload generated image to object storage using the `boto3` package"""

        self.img_logger.info(f'Uploading image {obj_filename} to Backblaze')
        
        async with self.lock:
            image_data.seek(0)
            try:
                b2 = boto3.client('s3')
                b2.put_object(Bucket=bucket_name, Key=obj_filename, Body=image_data)

            except NoCredentialsError as e:
                self.img_logger.error(f'Issue with Backblaze Credentials: {e}')

    # todo: switch to local object store
    async def __store_generated_image(self, obj_filename: str, b2_link: str, username: str, prompt: str, caption: str):
        """Store a reference to the generated image in Postgres"""

        self.pg_logger.info(f'Storing reference of image {obj_filename} that was generated by from {username}')

        async with self.bot.db_pool.acquire() as conn, conn.transaction():
            username_from_db = await conn.fetchval('SELECT UserID FROM Users WHERE Username = $1', username)

            if username_from_db:
                await conn.execute('''
                    INSERT INTO GeneratedImages (ImageLink, TimeCreated, UserID, Prompt, Caption)
                    VALUES ($1, CURRENT_TIMESTAMP AT TIME ZONE 'UTC', $2, $3, $4)
                ''', b2_link, username_from_db, prompt, caption)
                self.pg_logger.info(f'Stored reference of image {obj_filename} generated by {username}')

            elif not username_from_db:
                await conn.execute('''
                    INSERT INTO Users (Username)
                    VALUES ($1)
                ''', username)
                self.pg_logger.info(f'Added new user {username} to Users')

                username_from_db = await conn.fetchval('SELECT UserID FROM Users WHERE Username = $1', username)

                await conn.execute('''
                    INSERT INTO GeneratedImages (ImageLink, TimeCreated, UserID, Prompt, Caption)
                    VALUES ($1, CURRENT_TIMESTAMP AT TIME ZONE 'UTC', $2, $3, $4)
                ''', b2_link, username_from_db, prompt, caption)
                self.pg_logger.info(f'Stored reference of image {obj_filename} generated by {username}')

            else:
                self.pg_logger.error('Could not store reference of image in database')
                raise Exception("Error inserting image into database")

    @commands.command()
    async def img(self, ctx, *, prompt):
        """Chat command for a user to generate an image using DALLE 3 Standard."""

        if str(ctx.message.channel) != os.getenv('DISCORD_IMAGE_CHANNEL'):
            return
        
        await ctx.send(f'Generating...')
        self.img_logger.info(f'Image request recieved from {ctx.message.author.display_name}')
        
        filename = f"{uuid.uuid4().hex}.png"
        link = f"https://boggart.s3.us-east-005.backblazeb2.com/{filename}"

        try:
            image_result = await self.__generate_image(
                prompt=str(prompt),
                image_size=os.getenv('OPENAI_DALLE_IMAGE_SIZE'),
                image_quality=os.getenv('OPENAI_DALLE_IMAGE_QUALITY')
            )

        except Exception as e:
            await ctx.send(f'Error generating image: {e}')
            self.img_logger.error(f'Error generating image for {ctx.message.author.display_name}: {e}')
            return
        
        try:
            image = await self.__download_image(ctx, image_result.data[0].url)

        except Exception as e:
            await ctx.send(f"Error downloading image: {e}")
            self.img_logger.error(f"Could not download image: {e}")
            return

        try:
            async with asyncio.TaskGroup() as tg:
                # send to discord chat
                tg.send = asyncio.create_task(
                    self.__send_image(
                        ctx, 
                        image_data=image, 
                        filename=filename, 
                        caption=image_result.data[0].revised_prompt
                    )
                )

                # upload to backblaze
                tg.upload = asyncio.create_task(
                    self.__upload_generated_image( 
                        image_data=image,
                        obj_filename=filename, 
                        bucket_name=os.getenv('BACKBLAZE_BUCKET')
                    )
                )

                # store reference to file in database
                tg.store = asyncio.create_task(
                    self.__store_generated_image(
                        obj_filename=filename, 
                        b2_link=link, 
                        username=ctx.message.author.display_name, 
                        prompt=prompt, 
                        caption=image_result.data[0].revised_prompt
                    )
                )
                
        except Exception as e:
            await ctx.send(f"Error sending/storing image: {e}")
            self.img_logger.error(f"Issue sending/storing image: {e}")
            return

async def setup(bot):
    """Required to load the image generator cog when the service starts"""

    await bot.add_cog(ImageGenerator(bot))