import asyncio
import discord
import io
import logging
import os
import sys
import uuid
from pathlib import Path
from aiohttp import ClientSession
from discord.ext import commands
from openai import OpenAI
from pydantic import BaseModel
from boggart.core import Boggart
from boggart.db import AsyncQuerier
from boggart.llm_brain import llm_response


class GeneratedImageResult(BaseModel):
    filename: str
    download_url: str
    user_prompt: str
    revised_prompt: str


class ImageGenerator(commands.Cog):
    """Discord.py Cog for generating images using OpenAI DALLE"""

    def __init__(self, bot: Boggart) -> None:
        self.bot = bot

        self.stream_handler = logging.StreamHandler(stream=sys.stdout)
        self.date_format = "%Y-%m-%d %H:%M:%S"
        self.formatter = logging.Formatter(
            "[{asctime}] [{levelname:<8}] {name}: {message}",
            self.date_format,
            style="{",
        )
        self.stream_handler.setFormatter(self.formatter)

        self.img_logger = logging.getLogger("boggart.imagegenerator")
        self.img_logger.setLevel(logging.INFO)
        self.img_logger.addHandler(self.stream_handler)

        self.pg_logger = logging.getLogger("boggart.postgres")
        self.pg_logger.setLevel(logging.INFO)
        self.pg_logger.addHandler(self.stream_handler)

    async def _generate_image(
        self,
        prompt: str,
        image_size: str,
        image_quality: str,
    ) -> GeneratedImageResult:
        """Generates an image result from the provided prompt using the OpenAI API"""
        client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        result = client.images.generate(
            model=os.getenv("OPENAI_DALLE_MODEL"),
            prompt=prompt,
            n=1,
            size=image_size,
            quality=image_quality,
        )

        self.img_logger.info("Image downloaded from OpenAI")

        image_data = GeneratedImageResult(
            filename=f"{uuid.uuid4().hex}.png",
            download_url=result.data[0].url,
            user_prompt=prompt,
            revised_prompt=result.data[0].revised_prompt,
        )

        return image_data

    async def _download_image(
        self, ctx, image_data: GeneratedImageResult
    ) -> io.BytesIO:
        """
        Saves image from temporary OpenAI link to bytes object
        """
        async with (
            ClientSession() as session,
            session.get(image_data.download_url) as response,
        ):
            if response.status != 200:
                await ctx.send("Failed to download the image.")
                self.img_logger.warning("Could not download image from OpenAI")

                return

            image = await response.read()

        return io.BytesIO(image)

    async def _send_image(self, ctx, image_data: GeneratedImageResult) -> None:
        """send image to discord chat with revisd prompt as the caption"""
        image_bytes = await self._download_image(ctx, image_data)

        self.img_logger.info(f"Sending image {image_data.filename} to Discord")

        lock = asyncio.Lock()
        async with lock:
            image_bytes.seek(0)
            await ctx.send(
                image_data.revised_prompt,
                file=discord.File(
                    fp=image_bytes,
                    filename=image_data.filename,
                ),
            )

        return

    async def _save_image(self, ctx, image_data: GeneratedImageResult) -> None:
        """
        Download the `.png` image generated by OpenAI API using the temporary link provided.
        """
        image = await self._download_image(ctx, image_data)

        lock = asyncio.Lock()
        async with lock:
            image.seek(0)
            with open(Path("/images", image_data.filename), "wb") as image_file:
                image_file.write(image.read())

        self.pg_logger.info(
            f"Storing reference of {image_data.filename} that was generated by {ctx.message.author.display_name}"
        )

        async with self.bot.pg_engine.connect() as conn:
            db_querier = AsyncQuerier(conn)

            _ = await db_querier.create_generated_image(
                image_file=image_data.filename,
                prompt=image_data.user_prompt,
                caption=image_data.revised_prompt,
            )

            _ = await conn.commit()

        self.pg_logger.info(
            f"Stored reference of {image_data.filename} that was generated by {ctx.message.author.display_name}"
        )

        return

    @commands.command()
    async def img(self, ctx, *, prompt):
        """Chat command for a user to generate an image using DALLE 3 Standard."""
        if str(ctx.message.channel) != os.getenv("DISCORD_IMAGE_CHANNEL"):
            return

        self.img_logger.info(
            f"Image request recieved from {ctx.message.author.display_name}"
        )

        # make request to OpenAI API
        try:
            image_data = await self._generate_image(
                prompt=str(prompt),
                image_size=os.getenv("OPENAI_DALLE_IMAGE_SIZE"),
                image_quality=os.getenv("OPENAI_DALLE_IMAGE_QUALITY"),
            )

        # todo: fix this lazy error handling
        except Exception as e:
            if "content_policy_violation" in str(e):
                snark = llm_response(prompt)
                await ctx.send(snark)
                return

            await ctx.send(f"Error generating image: {e}")
            self.img_logger.error(
                f"Error generating image for {ctx.message.author.display_name}: {e}"
            )

            return

        # send to discord chat and save to db
        async with asyncio.TaskGroup() as tg:
            tg.send = asyncio.create_task(self._send_image(ctx, image_data))
            tg.save = asyncio.create_task(self._save_image(ctx, image_data))

        return


async def setup(bot):
    await bot.add_cog(ImageGenerator(bot))
